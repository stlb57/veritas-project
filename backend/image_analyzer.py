import google.generativeai as genai
import json
import re
import os
from PIL import Image

# --- CONFIGURATION ---
# ⚠️ This uses the same API key as your audio_analyzer.
# Ensure it's set correctly for the whole project.
API_KEY = os.getenv("GEMINI_API_KEY", "YOUR_GEMINI_API_KEY") 
genai.configure(api_key=API_KEY)

try:
    # Use the same powerful and fast model
    model = genai.GenerativeModel("gemini-1.5-flash")
    print("✅ Gemini image analysis model loaded successfully.")
except Exception as e:
    print(f"❌ Error loading Gemini model. Check your API key. Error: {e}")
    model = None

# --- Main Analysis Function ---
def analyze_image_content(image_path: str):
    """
    Analyzes an image file to detect signs of AI generation using the Gemini API.
    """
    if model is None:
        return {"error": "Gemini model is not available. Please check configuration."}

    try:
        # Open the image file
        img = Image.open(image_path)
    except FileNotFoundError:
        return {"error": f"Image file not found at path: {image_path}"}
    except Exception as e:
        return {"error": f"Could not open image file: {e}"}

    # The prompt instructs the model on how to behave and what to look for
    prompt = """
    You are a world-class digital image forensics expert. You have been given an image to analyze.
    Your task is to determine if the image is a real photograph or if it has been generated by an AI model (like Midjourney, DALL-E, etc.).
    Look for common AI artifacts such as:
    - Unnatural or distorted features on people (especially hands and eyes).
    - Inconsistent lighting, shadows, or reflections.
    - Textures that appear too smooth, waxy, or artificial.
    - Bizarre details in the background.
    - Asymmetrical patterns that should be symmetrical.
    
    Based on your analysis, is the image Real or Fake?
    Respond ONLY with a JSON object in the following format:
    {"decision": "Real/Fake", "confidence": 0.xx, "reason": "A brief explanation of your findings."}
    """

    try:
        # Send the prompt and the image to the model
        response = model.generate_content([prompt, img])
        
        # Clean the response to extract only the JSON part
        json_text_match = re.search(r'\{.*\}', response.text, re.DOTALL)
        if not json_text_match:
            return {"error": "No valid JSON found in the model's response.", "raw_response": response.text}

        json_text = json_text_match.group(0)
        data = json.loads(json_text)
        
        return {
            "decision": data.get("decision", "Uncertain"),
            "confidence": data.get("confidence", 0.0),
            "reason": data.get("reason", "No reason provided.")
        }

    except (json.JSONDecodeError, AttributeError):
        return {"error": "Failed to parse the model's JSON response.", "raw_response": response.text}
    except Exception as e:
        return {"error": f"An unexpected error occurred during analysis: {e}"}